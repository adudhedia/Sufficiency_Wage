Percentage_pw = round(count_pw / total,4))
By_Fam_Temp <- data_Analysis_All %>%
filter(RELATE == 2)
By_Fam_Temp <- unique(By_Fam_Temp$SERIAL)
By_Fam_Informal <- data_Analysis_All %>%
filter(!SERIAL %in% c(By_Fam_Temp)) %>%
filter(NAdults > 1) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
require(openxlsx)
list_of_datasets_By_Fam <- list("Married" = By_Fam_Marry, "Informal" = By_Fam_Informal)
write.xlsx(list_of_datasets_By_Fam, file = "Final Analysis By Family Type.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by Single moms
By_Moms <- data_Analysis %>%
filter(SEX == 2 & NAdults == 1 & NChildren > 0) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Dads <- data_Analysis %>%
filter(SEX == 1 & NAdults == 1 & NChildren > 0) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
require(openxlsx)
list_of_datasets_By_Parent <- list("Single Mom" = By_Moms, "Single Dad" = By_Dads)
write.xlsx(list_of_datasets_By_Parent, file = "Final Analysis By Single Parent.xlsx")
Combined_Data <- left_join(data_final1, SW_All,
by = c("NAdults"="Adult.s.", "Infants" = "Infant.s.", "Preschoolers" = "Preshooler.s.",
"Schoolers" = "Schoolager.s.", "Teenagers" = "Teenager.s.", "County" = "County",
"NChildren" = "NChildren", "Working_Adults" = "Working_Adults")) %>%
filter(RELATE == 1)
By_House_All <- Combined_Data %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[(ADJUSTED_INCOME*0.30) < (Housing.Costs * 12)]),
Percentage_sw = round(count_sw / total,4))
By_Income <- data_Analysis %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
Median_Earnings = median(ADJUSTED_INCOME))
require(openxlsx)
list_of_datasets_By_House <- list("Hosuing Cost" = By_House_All, "Median Income" = By_Income)
write.xlsx(list_of_datasets_By_House, file = "Final Analysis By Housing Cost.xlsx")
# Reading self-sufficiency standard for California in 2021
S_wage <- read.xlsx("https://selfsufficiencystandard.org//wp-content/uploads/2021/10/CA2021_AllFamilies.xlsx",sheet=3)
# Seeing the structure of the data
str(S_wage)
head(S_wage)
# Cleaning the data
S_wage_Temp <- S_wage[-c(1)]
# Transforming all the necessary columns to numeric
S_wage_Temp <- transform(S_wage_Temp,`Adult(s)` = as.numeric(`Adult(s)`),
`Infant(s)` = as.numeric(`Infant(s)`),
`Preshooler(s)` = as.numeric(`Preshooler(s)`),
`Schoolager(s)` = as.numeric(`Schoolager(s)`),
`Teenager(s)` = as.numeric(`Teenager(s)`))
# Converting N/As to 0
S_wage_Temp[is.na(S_wage_Temp)] = 0
# Gathering necessary data for Merced County
## Considering 1 child in a household to be preschooler
## Considering 2 children in a household as 1 preschooler and 1 School age
## Considering 3 children in a household as 1 preschooler, 1 School age 1 teenager
S_wage_Temp5 <- S_wage_Temp %>%
filter(Adult.s. < 5) %>% # Filtering out adults more than 4
filter(County == "Merced County" | County == "Stanislaus County" | County == "San Joaquin County") %>%
filter(Adult.s. < 4 & Infant.s. < 4 & Preshooler.s. < 4 & Schoolager.s. < 4 & Teenager.s. < 4) %>%
mutate(NChildren = select(., Infant.s.:Teenager.s.) %>% rowSums(na.rm = TRUE)) %>%
filter(NChildren <= 3)# Totaling number of children
# Duplicating Expenses of 3 adults to 4 adults as their expenses are similar [Additional of 300 a month in some cases]
SW4 <- S_wage_Temp5 %>%
filter(Adult.s. == 3)
SW4$Adult.s. <- 4
SW_Temp_Combined <- rbind(S_wage_Temp5, SW4)
# Separating 3 counties
SW_MC <- SW_Temp_Combined %>% filter(County == "Merced County")
SW_SC <- SW_Temp_Combined %>% filter(County == "Stanislaus County")
SW_SJC <- SW_Temp_Combined %>% filter(County == "San Joaquin County")
# Adding rows for working adults
S_wage_MC <- data.frame(SW_MC[rep(seq_len(dim(SW_MC)[1]), SW_MC$Adult.s.,),
, drop = FALSE], row.names=NULL)
S_wage_SC <- data.frame(SW_SC[rep(seq_len(dim(SW_SC)[1]), SW_MC$Adult.s.,),
, drop = FALSE], row.names=NULL)
S_wage_SJC <- data.frame(SW_SJC[rep(seq_len(dim(SW_SJC)[1]), SW_MC$Adult.s.,),
, drop = FALSE], row.names=NULL)
# Adding working Adults column to the tables
S_wage_MC <- S_wage_MC %>% group_by(Adult.s., Infant.s., Preshooler.s., Schoolager.s., Teenager.s.) %>%
mutate(Working_Adults = 1:n()) %>%
mutate(Child.Care.Costs = if_else(Working_Adults < Adult.s., 0, Child.Care.Costs))
S_wage_SC <- S_wage_SC %>% group_by(Adult.s., Infant.s., Preshooler.s., Schoolager.s., Teenager.s.) %>%
mutate(Working_Adults = 1:n()) %>%
mutate(Child.Care.Costs = if_else(Working_Adults < Adult.s., 0, Child.Care.Costs))
S_wage_SJC <- S_wage_SJC %>% group_by(Adult.s., Infant.s., Preshooler.s., Schoolager.s., Teenager.s.) %>%
mutate(Working_Adults = 1:n()) %>%
mutate(Child.Care.Costs = if_else(Working_Adults < Adult.s., 0, Child.Care.Costs))
# Combining all SW Tables
SW_All <- rbind(S_wage_MC, S_wage_SC, S_wage_SJC)
SW_All <- as.data.frame(SW_All)
# Calculating Misc. Exp as 10% of all Other Expenses
SW_All <- SW_All %>% mutate(Miscellaneous.costs = rowSums(.[10:14])*0.1)
# Adding all expenses total to Monthly SSW Column
SW_All$Monthly.Self.Sufficiency.Wage <- rowSums(SW_All[ , c(10:15)], na.rm=TRUE)
url <- "https://www.bankrate.com/taxes/tax-brackets/"
page <- read_html(url) #Creates an html document from URL
table1 <- html_table(page, fill = TRUE) #Parses tables into data frames
# Extracting 1st table on the page
Taxes <- table1[1]
Taxes <- do.call(rbind.data.frame, Taxes)
# Checking the Structure of the Taxes Table
str(Taxes)
# Choosing the appropriate columns and rows and cleaning the table for calculations.
Taxes_Temp <- Taxes[-1,-3:-5]
Taxes_Temp <- Taxes_Temp %>% separate(Single, c("First","Last"),sep="to")
Taxes_Temp$`Tax rate` <- gsub("[^0-9]","",Taxes_Temp$`Tax rate`)
Taxes_Temp$First <- gsub("[^0-9]","",Taxes_Temp$First)
Taxes_Temp$Last <- gsub("[^0-9]","",Taxes_Temp$Last)
#Converting all figures to numbers
Taxes_Temp$`Tax rate` <- as.numeric(Taxes_Temp$`Tax rate`)
Taxes_Temp$First <- as.numeric(Taxes_Temp$First)
Taxes_Temp$Last <- as.numeric(Taxes_Temp$Last)
Taxes_Temp[7,3] <- Inf
# Converting Tax rate to decimals
Taxes_Temp$`Tax rate` <- Taxes_Temp$`Tax rate`/100
# Created a function to calculate Federal taxes
income_tax_fed <- function(income,
brackets = Taxes_Temp$Last,
rates = Taxes_Temp$`Tax rate`) {
sum(diff(c(0, pmin(income, brackets))) * rates)
}
url2 <- "https://www.bankrate.com/taxes/california-state-taxes/#:~:text=California%20has%20nine%20tax%20brackets,the%20California%20Franchise%20Tax%20Board.&text=The%20standard%20deduction%20in%20California,and%20%249%2C606%20for%20married%20households."
page2 <- read_html(url2) #Creates an html document from URL
table2 <- html_table(page2, fill = TRUE) #Parses tables into data frames
# Extracting 1st table on the page
Taxes_CA <- table2[1]
Taxes_CA <- do.call(rbind.data.frame, Taxes_CA)
# Checking the Structure of the Taxes Table
str(Taxes_CA)
# Choosing the appropriate columns and rows and cleaning the table for calculations.
Taxes_Temp2 <- Taxes_CA[-1,-3]
Taxes_Temp2 <- Taxes_Temp2[-10,]
colnames(Taxes_Temp2) <- c('CA Tax Rates', 'Single')
Taxes_Temp2 <- Taxes_Temp2 %>% separate(Single, c("First","Last"),sep="-")
Taxes_Temp2$`CA Tax Rates` <- gsub("[^0-9]","",Taxes_Temp2$`CA Tax Rates`)
Taxes_Temp2$First <- gsub("[^0-9]","",Taxes_Temp2$First)
Taxes_Temp2$Last <- gsub("[^0-9]","",Taxes_Temp2$Last)
#Converting all figures to numbers
Taxes_Temp2$`CA Tax Rates` <- as.numeric(Taxes_Temp2$`CA Tax Rates`)
Taxes_Temp2$First <- as.numeric(Taxes_Temp2$First)
Taxes_Temp2$Last <- as.numeric(Taxes_Temp2$Last)
Taxes_Temp2[9,3] <- Inf
# Converting Tax rate to decimals
Taxes_Temp2$`CA Tax Rates` <- Taxes_Temp2$`CA Tax Rates`/1000
# Created a function to calculate State taxes (California)
income_tax_CA <- function(income,
brackets = Taxes_Temp2$Last,
rates = Taxes_Temp2$`CA Tax Rates`) {
sum(diff(c(0, pmin(income, brackets))) * rates)
}
SW_All <- SW_All %>% mutate(Taxes = (sapply(SW_All$Monthly.Self.Sufficiency.Wage*12, FUN = income_tax_fed) +
sapply(SW_All$Monthly.Self.Sufficiency.Wage*12, FUN = income_tax_CA))/12)
SW_All$Monthly.Self.Sufficiency.Wage <- rowSums(SW_All[ , c(10:19)], na.rm=TRUE)
# Calculating Annual (Month * 12) and hourly wage (Month / 176 hours)
## 176 = (30 Days in a year - 8 days of weekends) * 8 Hours
SW_All <- SW_All %>% mutate(Annual.Self.Sufficiency.Wage = Monthly.Self.Sufficiency.Wage * 12) %>%
mutate(Hourly.Self.Sufficiency.Wage = (Monthly.Self.Sufficiency.Wage / 176)/Working_Adults)
# Rounding off the amounts to cents
SW_All$Monthly.Self.Sufficiency.Wage <- round(SW_All$Monthly.Self.Sufficiency.Wage, digits = 2)
SW_All$Hourly.Self.Sufficiency.Wage <- round(SW_All$Hourly.Self.Sufficiency.Wage, digits = 2)
SW_All$Annual.Self.Sufficiency.Wage <- round(SW_All$Annual.Self.Sufficiency.Wage, digits = 2)
# Selecting necessary rows for joining into Sufficiency wage final table
S_wage_Final <- SW_All %>% select(Adult.s., Infant.s., Preshooler.s., Schoolager.s., Teenager.s.,
County, Hourly.Self.Sufficiency.Wage, Monthly.Self.Sufficiency.Wage,
Annual.Self.Sufficiency.Wage, NChildren, Working_Adults)
# Joining county data with sufficiency wage table by Number of adults, working adults and Number of children.
## Filtering it as 1 observation per household who is the head of the household
Data_Final_Analysis <- left_join(data_final1, S_wage_Final,
by = c("NAdults"="Adult.s.", "Infants" = "Infant.s.", "Preschoolers" = "Preshooler.s.",
"Schoolers" = "Schoolager.s.", "Teenagers" = "Teenager.s.", "County" = "County",
"NChildren" = "NChildren", "Working_Adults" = "Working_Adults"))
# Extracting Poverty Wage of 2021
url <- "https://aspe.hhs.gov/topics/poverty-economic-mobility/poverty-guidelines/prior-hhs-poverty-guidelines-federal-register-references/2021-poverty-guidelines"
page <- read_html(url) #Creates an html document from URL
table1 <- html_table(page, fill = TRUE) #Parses tables into data frames
# Extracting 1st table on the page
P_Wage <- table1[1]
P_Wage <- do.call(rbind.data.frame, P_Wage)
# Cleaning the data table and converting the table to integers
P_Wage <- P_Wage %>% filter(`Persons in family/household` < 8) %>%
mutate(`Persons in family/household` = as.integer(`Persons in family/household`)) %>%
mutate(`Poverty guideline` = parse_number(`Poverty guideline`))
# Adding Poverty Guidelines to the Data Set
data_Analysis_All <- left_join(Data_Final_Analysis, P_Wage, by = c("FAMSIZE" = "Persons in family/household"))
data_Analysis <- data_Analysis_All %>% filter(RELATE == 1)
write_xlsx(data_Analysis,
'~Final Data All Counties.xlsx')
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines.
All_County_Analysis <- data_Analysis %>%
group_by(NAdults, Working_Adults, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
MC_Analysis <- data_Analysis %>%
filter(COUNTYFIP == 47) %>%
group_by(NAdults, Working_Adults, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
SJC_Analysis <- data_Analysis %>%
filter(COUNTYFIP == 77) %>%
group_by(NAdults, Working_Adults, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
SC_Analysis <- data_Analysis %>%
filter(COUNTYFIP == 99) %>%
group_by(NAdults, Working_Adults, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets <- list("All County" = All_County_Analysis, "MC_Analysis" = MC_Analysis,
"SJC_Analysis" = SJC_Analysis, "SC_Analysis" = SC_Analysis)
write.xlsx(list_of_datasets, file = "Final Analysis.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by year
By_Year_All <- data_Analysis %>%
group_by(MULTYEAR) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Year_MC <- data_Analysis %>%
filter(COUNTYFIP == 47) %>%
group_by(MULTYEAR) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Year_SJC <- data_Analysis %>%
filter(COUNTYFIP == 77) %>%
group_by(MULTYEAR) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Year_SC <- data_Analysis %>%
filter(COUNTYFIP == 99) %>%
group_by(MULTYEAR) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Year <- list("All County" = By_Year_All, "MC_Analysis" = By_Year_MC,
"SJC_Analysis" = By_Year_SJC, "SC_Analysis" = By_Year_SC)
write.xlsx(list_of_datasets_By_Year, file = "Final Analysis By Year.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by Race
By_Race_All <- data_Analysis %>%
group_by(Ethnicity) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Race_MC <- data_Analysis %>%
filter(COUNTYFIP == 47) %>%
group_by(Ethnicity) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Race_SJC <- data_Analysis %>%
filter(COUNTYFIP == 77) %>%
group_by(Ethnicity) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Race_SC <- data_Analysis %>%
filter(COUNTYFIP == 99) %>%
group_by(Ethnicity) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Race <- list("All County" = By_Race_All, "MC_Analysis" = By_Race_MC,
"SJC_Analysis" = By_Race_SJC, "SC_Analysis" = By_Race_SC)
write.xlsx(list_of_datasets_By_Race, file = "Final Analysis By Race.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by Education Attainment
By_Edu_All <- data_Analysis %>%
group_by(Education) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Edu_MC <- data_Analysis %>%
filter(COUNTYFIP == 47) %>%
group_by(Education) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Edu_SJC <- data_Analysis %>%
filter(COUNTYFIP == 77) %>%
group_by(Education) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Edu_SC <- data_Analysis %>%
filter(COUNTYFIP == 99) %>%
group_by(Education) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Edu <- list("All County" = By_Edu_All, "MC_Analysis" = By_Edu_MC,
"SJC_Analysis" = By_Edu_SJC, "SC_Analysis" = By_Edu_SC)
write.xlsx(list_of_datasets_By_Edu, file = "Final Analysis By Education.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by Citizenship status
By_Citi_All <- data_Analysis %>%
group_by(Citizenship) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Citi_MC <- data_Analysis %>%
filter(COUNTYFIP == 47) %>%
group_by(Citizenship) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Citi_SJC <- data_Analysis %>%
filter(COUNTYFIP == 77) %>%
group_by(Citizenship) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Citi_SC <- data_Analysis %>%
filter(COUNTYFIP == 99) %>%
group_by(Citizenship) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Citi <- list("All County" = By_Citi_All, "MC_Analysis" = By_Citi_MC,
"SJC_Analysis" = By_Citi_SJC, "SC_Analysis" = By_Citi_SC)
write.xlsx(list_of_datasets_By_Citi, file = "Final Analysis By Citizenship.xlsx")
By_Sex_male <- data_Analysis %>%
filter(SEX == 1) %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Sex_female <- data_Analysis %>%
filter(SEX == 2) %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Sex <- list("Male" = By_Sex_male, "Female" = By_Sex_female)
write.xlsx(list_of_datasets_By_Sex, file = "Final Analysis By Sex.xlsx")
By_Fam_Marry <- data_Analysis_All %>%
filter(RELATE == 2) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Created a separate set of SERIAL numbers to remove households who are married/have spouse
By_Fam_Temp <- data_Analysis_All %>%
filter(RELATE == 2)
By_Fam_Temp <- unique(By_Fam_Temp$SERIAL)
By_Fam_Informal <- data_Analysis_All %>%
filter(!SERIAL %in% c(By_Fam_Temp)) %>%
filter(NAdults > 1) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Fam <- list("Married" = By_Fam_Marry, "Informal" = By_Fam_Informal)
write.xlsx(list_of_datasets_By_Fam, file = "Final Analysis By Family Type.xlsx")
# Analyzing the count and the percentage of population under Sufficiency Wage and Poverty Guidelines by Single moms
By_Moms <- data_Analysis %>%
filter(SEX == 2 & NAdults == 1 & NChildren > 0) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
By_Dads <- data_Analysis %>%
filter(SEX == 1 & NAdults == 1 & NChildren > 0) %>%
group_by(County, NChildren) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<Annual.Self.Sufficiency.Wage]),
count_pw = length(ADJUSTED_INCOME[ADJUSTED_INCOME<`Poverty guideline`]),
Percentage_sw = round(count_sw / total,4),
Percentage_pw = round(count_pw / total,4))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_Parent <- list("Single Mom" = By_Moms, "Single Dad" = By_Dads)
write.xlsx(list_of_datasets_By_Parent, file = "Final Analysis By Single Parent.xlsx")
Combined_Data <- left_join(data_final1, SW_All,
by = c("NAdults"="Adult.s.", "Infants" = "Infant.s.", "Preschoolers" = "Preshooler.s.",
"Schoolers" = "Schoolager.s.", "Teenagers" = "Teenager.s.", "County" = "County",
"NChildren" = "NChildren", "Working_Adults" = "Working_Adults")) %>%
filter(RELATE == 1)
By_House_All <- Combined_Data %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
count_sw = length(ADJUSTED_INCOME[(ADJUSTED_INCOME*0.30) < (Housing.Costs * 12)]),
Percentage_sw = round(count_sw / total,4))
By_Income <- data_Analysis %>%
group_by(County) %>%
summarize(
total = length(ADJUSTED_INCOME),
Median_Earnings = median(ADJUSTED_INCOME))
# Extracting the data sets to Excel for further analysis and visualization.
require(openxlsx)
list_of_datasets_By_House <- list("Hosuing Cost" = By_House_All, "Median Income" = By_Income)
write.xlsx(list_of_datasets_By_House, file = "Final Analysis By Housing Cost.xlsx")
write_xlsx(data_Analysis,
'~/Final Data All Counties.xlsx')
write_xlsx(data_Analysis,
'~/Final Data All Counties.xlsx')
write_xlsx(data_Analysis,
'Final Data All Counties.xlsx')
